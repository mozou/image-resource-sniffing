name: 构建Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build-android:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: 设置Java环境
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'
        
    - name: 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          ffmpeg \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libsdl2-ttf-dev \
          libportmidi-dev \
          libswscale-dev \
          libavformat-dev \
          libavcodec-dev \
          zlib1g-dev \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev \
          libgstreamer-plugins-good1.0-dev \
          unzip \
          zip
          
    - name: 缓存pip依赖
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 缓存buildozer目录
      uses: actions/cache@v4
      with:
        path: .buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-
          
    - name: 安装Python依赖
      run: |
        python -m pip install --upgrade pip
        pip install buildozer cython
        pip install -r requirements.txt
        
    - name: 构建APK
      run: |
        # 显示当前目录和文件
        echo "当前工作目录:"
        pwd
        echo "目录内容:"
        ls -la
        
        # 检查必要文件是否存在
        if [ ! -f "buildozer.spec" ]; then
          echo "错误: buildozer.spec 文件不存在"
          exit 1
        fi
        
        if [ ! -f "main.py" ]; then
          echo "错误: main.py 文件不存在"
          exit 1
        fi
        
        # 设置环境变量
        export JAVA_HOME=$JAVA_HOME_11_X64
        export ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk
        export ANDROID_SDK_ROOT=$ANDROID_HOME
        export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools
        
        # 显示环境信息
        echo "Java版本:"
        java -version
        echo "Python版本:"
        python --version
        echo "Buildozer版本:"
        buildozer version
        
        # 初始化buildozer（如果需要）
        echo "初始化Buildozer..."
        buildozer init || echo "Buildozer已初始化或使用现有配置"
        
        # 构建debug版本
        echo "开始构建APK..."
        buildozer android debug --verbose
        
        # 检查APK是否生成成功
        echo "检查生成的文件:"
        ls -la
        if [ -d "bin" ]; then
          echo "bin目录内容:"
          ls -la bin/
          if [ ! -f bin/*.apk ]; then
            echo "错误: APK文件未生成"
            exit 1
          fi
        else
          echo "错误: bin目录不存在"
          exit 1
        fi
        
    - name: 上传APK文件
      uses: actions/upload-artifact@v4
      with:
        name: 图片资源嗅探工具-debug
        path: bin/*.apk
        retention-days: 30
        
    - name: 创建Release（仅在推送到main分支时）
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: 图片资源嗅探工具 v${{ github.run_number }}
        body: |
          ## 更新内容
          - 自动构建的Android APK
          - 构建时间: ${{ github.event.head_commit.timestamp }}
          - 提交信息: ${{ github.event.head_commit.message }}
          
          ## 安装说明
          1. 下载下方的APK文件
          2. 在Android设备上启用"未知来源"应用安装
          3. 安装APK文件
          4. 首次运行时授予网络和存储权限
          
        files: bin/*.apk
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}